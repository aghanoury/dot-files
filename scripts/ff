# /bin/sh
#echo "searching the following locations: ${@:-.}"

# optional argument to specify depth of search
# user would specify this like "-d 2" for example


depth=""
directories="."

# set up base 'find' command
base_cmd="find"
fzf_cmd="fzf"

# parse arguments
# -d is the depth argument
# all other arguments should be directories and will be searched
# if no directories are specified, the current directory will be searched
while getopts ":d:" opt; do
  case $opt in
    d)
      depth="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

shift $((OPTIND -1))

# leftover arguments are now directorys to search
# check if there are remaining arguments
# if so, replace directories with them
if [ $# -gt 0 ]; then
  echo "searching the following locations: ${@:-.}"
    directories="$@"
fi

# NOTE: fd is a faster alternative to find. but not all machines will have it installed
# if `fd` is not installed, use `find` instead
if ! command -v fd &> /dev/null
then
    echo "fd could not be found, using find instead"
else
    fd_cmd='fd --no-ignore -tf -td ".*" | fzf'
    eval "$fd_cmd"
    exit $?
fi


# if depth was specificied, add the option to the base_cmd
if [ -n "$depth" ]; then
    base_cmd="$base_cmd -maxdepth $depth"
fi
base_cmd="$base_cmd $directories -type f,d"
base_cmd="$base_cmd 2>/dev/null"
# execute base cmd and pipe into fzf 
eval "$base_cmd" | "$fzf_cmd"

# if [ -z "$depth" ]; then
# #     find $directories -type f,d \( -path './Library' \) -prune -o -print 2>/dev/null | fzf
#     find $directories -type f,d -not \( -path './Library/*' \) 2>/dev/null | fzf
# else
#     find $directories -maxdepth $depth -type f,d -not \( -path './Library/*' \)  2>/dev/null | fzf
# fi
