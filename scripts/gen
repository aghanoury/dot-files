#! /usr/bin/env python3

import argparse
import os
import readline
import time
from rich.console import Console
from rich.markdown import Markdown

parser = argparse.ArgumentParser(description="A program that optionally takes a stream argument.")

# Add the optional stream argument
parser.add_argument('-s', '--stream', 
                    action='store_false', 
                    help='stream the results instead of printin in markdown')

parser.add_argument('-f', '--file', 
                    help="read in a text file.")

# Parse the arguments
args = parser.parse_args()

# send the prompt string first to make it seem faster
print("Loading...")
import google.generativeai as genai

GOOGLE_API_KEY=os.getenv('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

# for m in genai.list_models():
#   if 'generateContent' in m.supported_generation_methods:
#     print(m.name)

console = Console()
model = genai.GenerativeModel('gemini-1.5-flash-latest')
chat = model.start_chat()


def get_input(pre_prompt="Prompt"):
    while True:
        try:
            p = input(f"{pre_prompt}: ")
            if p == "":
                continue
            elif p == "exit":
                exit(0)
            print()
            break
        except (KeyboardInterrupt, EOFError):
            print("Exiting.")
            exit(0)
    return p


if args.file:
    p = get_input("Enter a preamble prompt before file")

    with open(args.file, 'r') as f:
        fc = f.read()

    p += fc
    response = chat.send_message(p, stream=args.stream)
    if args.stream:
        for chunk in response:
            words = chunk.text.split(' ')
            for i, word in enumerate(words):
                if i < len(words) - 1:
                    print(word, end=' ', flush=True)
                    # print('here')
                    time.sleep(0.01)
                else:
                    print(word, end='')
            # print(chunk.text, end='')
        print()
    else:
        md = Markdown(response.text)
        console.print(md)
    print('------------------------')


while True:

    p = get_input()

    response = chat.send_message(p, stream=args.stream)
    if args.stream:
        for chunk in response:
            words = chunk.text.split(' ')
            for i, word in enumerate(words):
                if i < len(words) - 1:
                    print(word, end=' ', flush=True)
                    # print('here')
                    time.sleep(0.01)
                else:
                    print(word, end='')
            # print(chunk.text, end='')
        print()
    else:
        md = Markdown(response.text)
        console.print(md)
    print('------------------------')
