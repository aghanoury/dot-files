#! /usr/bin/env python3

import argparse
import os
import readline
import time
from proto.enums import EnumRule
from rich.console import Console
from rich.markdown import Markdown
from rich.prompt import Prompt
from rich.live import Live
from rich.progress import Progress
from rich import print

GOOGLE_API_KEY=os.getenv('GOOGLE_API_KEY')
with Progress(transient=True) as progress:
    task = progress.add_task("Loading", total=None)

    parser = argparse.ArgumentParser(description="A program that optionally takes a stream argument.")

# Add the optional stream argument
    parser.add_argument('-r', '--raw', 
                    action='store_true',
                    help='print the raw text without rendering markdown')

    parser.add_argument('-f', '--file', 
                    help="read in a text file.")

# Parse the arguments
    args = parser.parse_args()

    import google.generativeai as genai

    genai.configure(api_key=GOOGLE_API_KEY)

    console = Console()
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
    chat = model.start_chat()


def get_input(pre_prompt="Prompt"):
    global console
    while True:
        try:
            p = input(f'{pre_prompt}: ')
            if p == "":
                continue
            elif p == "exit":
                exit(0)
            break
        except (KeyboardInterrupt, EOFError):
            print("Exiting.")
            exit(0)
    return p


# TODO: handle file input 
if args.file:
    p = get_input("Enter a preamble prompt before file")

    with open(args.file, 'r') as f:
        fc = f.read()

    p += fc
    response = chat.send_message(p, stream=args.stream)
    if args.stream:
        for chunk in response:
            words = chunk.text.split(' ')
            for i, word in enumerate(words):
                if i < len(words) - 1:
                    print(word, end=' ', flush=True)
                    # print('here')
                    time.sleep(0.01)
                else:
                    print(word, end='')
            # print(chunk.text, end='')
        print()
    else:
        md = Markdown(response.text)
        console.print(md)
    print('------------------------')

console.rule("", style="bold red")
while True:
    p = get_input()
    try:
        response = chat.send_message(p, stream=True)
        md_content = ""
        console.rule("", style="bold green")

        # print the raw text (with typing animations)
        if args.raw:
            for chunk in response:
                words = chunk.text.split(' ')
                for i, word in enumerate(words):
                    if i < len(words) - 1:
                        print(word, end=' ', flush=True)
                    else:
                        print(word, end='')
                    time.sleep(0.01)
            print()

        # print the neat markdown version
        else:
            with Live(console=console, auto_refresh=False) as live:
                for chunk in response:
                    words = chunk.text.split(' ')
                    for i, word in enumerate(words):
                        if i < len(words)-1:
                            md_content += word + ' '
                        else:
                            md_content += word
                        markdown = Markdown(md_content)
                        time.sleep(0.01)
                        live.update(markdown, refresh=True)
    except:
        print(":warning-emoji: [bold red blink] Response failed![/]")


    console.rule("", style="bold red")
