#! /usr/bin/env python3

import argparse
import os
import time
from rich.console import Console
from rich.markdown import Markdown

parser = argparse.ArgumentParser(description="A program that optionally takes a stream argument.")

# Add the optional stream argument
parser.add_argument('-s', '--stream', 
                    action='store_false', 
                    help='stream the results instead of printin in markdown')

# Parse the arguments
args = parser.parse_args()

# send the prompt string first to make it seem faster
print("Prompt: ", end='')
import google.generativeai as genai
p=input("")
print()

GOOGLE_API_KEY=os.getenv('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

# for m in genai.list_models():
#   if 'generateContent' in m.supported_generation_methods:
#     print(m.name)

console = Console()
model = genai.GenerativeModel('gemini-1.5-flash-latest')
chat = model.start_chat()

while True:
    if p == 'exit':
        print("Exiting.")
        exit(0)
    response = chat.send_message(p, stream=args.stream)
    if args.stream:
        for chunk in response:
            words = chunk.text.split(' ')
            for i, word in enumerate(words):
                if i < len(words) - 1:
                    print(word, end=' ', flush=True)
                    # print('here')
                    time.sleep(0.01)
                else:
                    print(word, end='')
            # print(chunk.text, end='')
    else:
        md = Markdown(response.text)
        console.print(md)
    print('------------------------')
    try:
        p = input("Prompt: ")
        print()
    except (KeyboardInterrupt, EOFError):
        print("Exiting.")
        exit(0)
